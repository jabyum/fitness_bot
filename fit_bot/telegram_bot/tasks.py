import threading

import schedule
import time
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from telebot import apihelper
from django.utils import timezone
from datetime import timedelta
from django.db.models import Q, F
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import datetime

from .models import PaidUser, FinishedUser, CourseDay, UnpaidUser
from courses.models import –ö–∞—Ç–µ–≥–æ—Ä–∏–∏, Content, Mailing, Training
from .loader import bot
from .states import States
from .handlers.courses_interaction.edit_calories_backends import return_calories_and_norm

from .warm_up_bot.handlers.mailings import check_unfinished_users

user_data = {}


def send_daily_content():
    paid_users = PaidUser.objects.all()

    for user in paid_users:
        try:
            matching_category = –ö–∞—Ç–µ–≥–æ—Ä–∏–∏.objects.get(
                –ø–æ–ª=user.–ø–æ–ª,
                —Ü–µ–ª—å=user.—Ü–µ–ª—å,
                –º–µ—Å—Ç–æ=user.–º–µ—Å—Ç–æ,
                —É—Ä–æ–≤–µ–Ω—å=user.—É—Ä–æ–≤–µ–Ω—å
            )

            delta_days = (timezone.now().date() - user.paid_day).days
            current_day = delta_days

            daily_contents = Mailing.objects.filter(
                category=matching_category,
                day=current_day,
            )

            for content in daily_contents:
                updated_caption = content.caption.replace("calories", str(user.calories)).replace("name",
                                                                                                  user.full_name)

                if content.content_type == 'V':
                    video_file_id = content.video.video_file_id
                    bot.send_video(chat_id=user.user, video=video_file_id, caption=updated_caption)
                elif content.content_type == 'T':
                    bot.send_message(chat_id=user.user, text=updated_caption)
                elif content.content_type == 'P':
                    bot.send_photo(chat_id=user.user, photo=content.photo_file_id, caption=updated_caption)
                elif content.content_type == 'G':
                    bot.send_document(chat_id=user.user, document=content.gif_file_id, caption=updated_caption)
        except apihelper.ApiException as e:
            error_code = e.result.status_code
            if error_code == 403:
                bot.send_message(305896408, f"User {user.user} blocked the bot. Removing from the database.")
                user.delete()
            else:
                bot.send_message(305896408, f"Error {error_code}: {e.result.reason}")
        except Exception as E:
            bot.send_message(305896408, f"–û—à–∏–±–∫–∞: {E}")


def check_calories():
    paid_users = PaidUser.objects.all()

    for user in paid_users:
        try:
            name = user.full_name
            current_day = (timezone.now().date() - user.paid_day).days

            user_calories, remaining_calories, daily_norm, daily_proteins_norm, remaining_proteins \
                = return_calories_and_norm(user, current_day)

            if daily_norm - remaining_calories < daily_norm * 0.8:
                bot.send_message(chat_id=user.user,
                                 text=f'*{name}*! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ '
                                      f'—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å üìì',
                                 parse_mode='Markdown')
        except apihelper.ApiException as e:
            error_code = e.result.status_code
            if error_code == 403:
                bot.send_message(305896408, f"User {user.user} blocked the bot. Removing from the database.")
                user.delete()
            else:
                bot.send_message(305896408, f"Error {error_code}: {e.result.reason}")
        except Exception as E:
            bot.send_message(305896408, f"–û—à–∏–±–∫–∞: {E}")


def check_for_daily_content():
    paid_users = PaidUser.objects.all()

    for user in paid_users:
        current_day = (timezone.now().date() - user.paid_day).days
        try:
            if current_day != 0:
                course_day, created = CourseDay.objects.get_or_create(user=user, day=current_day,
                                                                      defaults={'has_requested': False})
                if not course_day.has_requested:
                    bot.send_message(chat_id=user.user, text="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
        except apihelper.ApiException as e:
            error_code = e.result.status_code
            if error_code == 403:
                bot.send_message(305896408, f"User {user.user} blocked the bot. Removing from the database.")
                user.delete()
            else:
                bot.send_message(305896408, f"Error {error_code}: {e.result.reason}")
        except Exception as E:
            bot.send_message(305896408, f"–û—à–∏–±–∫–∞: {E}")


def check_and_send_content():
    current_time_utc = datetime.datetime.now(pytz.utc)

    paid_users = PaidUser.objects.all()

    for user in paid_users:
        try:
            delta_days = (timezone.now().date() - user.paid_day).days
            user_timezone_str = user.timezone

            if user_timezone_str:
                user_timezone = pytz.timezone(user_timezone_str)
                current_time_local = current_time_utc.astimezone(user_timezone)

            if delta_days == 22:
                finished_user = FinishedUser(
                    user=user.user,
                    username=user.username,
                    full_name=user.full_name,
                    paid_day=user.paid_day,
                    calories=user.calories,
                    timezone=user.timezone,
                    –ø–æ–ª=user.–ø–æ–ª,
                    —Ü–µ–ª—å=user.—Ü–µ–ª—å,
                    –º–µ—Å—Ç–æ=user.–º–µ—Å—Ç–æ,
                    —É—Ä–æ–≤–µ–Ω—å=user.—É—Ä–æ–≤–µ–Ω—å,
                )
                finished_user.save()
                UnpaidUser.objects.filter(user_id=user.user).update(has_paid=False)
                user.delete()

        except Exception as E:
            bot.send_message(305896408, f"–û—à–∏–±–∫–∞: {E}")


def change_calories_norm():
    paid_users = PaidUser.objects.all()
    for user in paid_users:
        try:
            delta_days = (timezone.now().date() - user.paid_day).days
            if delta_days == 8:
                if user.—Ü–µ–ª—å == "G":
                    PaidUser.objects.filter(user=user.user).update(calories=F('calories') * 1.022)
                else:
                    PaidUser.objects.filter(user=user.user).update(calories=F('calories') * 0.834)
                bot.send_message(chat_id=user.user,
                                 text=f'{user.full_name}, –º—ã –æ–±–Ω–æ–≤–∏–ª–∏ –≤–∞—à—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π!\n\n'
                                      f'–í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é –Ω–æ—Ä–º—É –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –∫–∞–ª–æ—Ä–∏–π')
        except Exception as E:
            bot.send_message(305896408, f"–û—à–∏–±–∫–∞: {E}")


schedule.every().day.at("01:00").do(change_calories_norm)
schedule.every().day.at("09:00").do(send_daily_content)
schedule.every().day.at("18:00").do(check_calories)
schedule.every().day.at("20:00").do(check_for_daily_content)
schedule.every(1).minutes.do(check_unfinished_users)


def run_scheduler():
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            bot.send_message(305896408, f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(1)


scheduler_thread = threading.Thread(target=run_scheduler)
