from telebot.types import Message, InlineKeyboardMarkup, \
    InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from telebot import custom_filters

from datetime import date
from django.shortcuts import get_object_or_404
from django.db.models import F

from ..mainmenu import create_inline_markup, get_id, create_keyboard_markup
from ...loader import bot
from ...states import PurchaseStates, AfterPurchaseStates
from ...models import UnpaidUser, PaidUser, BankCards

ADMIN_CHAT_ID = 305896408
# ADMIN_CHAT_ID = 305896408
user_data = {}


def add_data(user, tag, info):
    if user not in user_data:
        user_data[user] = {}
    user_data[user][tag] = info


# @bot.callback_query_handler(func=lambda call: call.data == 'Go_for_it')
# def after_greeting(call: CallbackQuery):
#     user_id, chat_id = get_id(call=call)
#
#     markup = create_keyboard_markup('–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏...')
#
#     test = 'AgACAgIAAxkBAAIxZmTWibqN_mHYK-1uJs08CdoexIw0AAI4zDEb8Jm5SqYMWroMFb56AQADAgADeQADMAQ'
#     official = 'AgACAgIAAxkBAAEBJA9k2rj2-rChgpOYjuzj5M0XhhxWVwAC4coxG3dI2EqAfXmGAAHDqlABAAMCAAN5AAMwBA'
#     text = '*üëã –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏–∑–∞*\n\n' \
#            '–Ø ‚Äì –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ò–±—Ä–∞—Ç–∞ –∏ –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –Ω–∞ –≤—Å–µ–º ' \
#            '–ø—É—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º ‚ò∫Ô∏è'
#
#     bot.send_photo(chat_id, photo=official, caption=text, reply_markup=markup, parse_mode='Markdown')
#
#     markup = create_inline_markup(('–¢–∏–Ω—å–∫–æ—Ñ—Ñ (–†–æ—Å—Å–∏—è)', 'tinkoff'), ('Click/Payme (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)', 'click'),
#                                   ('–î—Ä—É–≥–æ–µ', 'other'))
#
#     bot.send_message(chat_id, text='–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
#                      reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ['tinkoff', 'click', 'other', 'registration'])
def after_greeting(call: CallbackQuery):
    user_id, chat_id = get_id(call=call)

    answer = call.data
    if answer == 'other':
        markup = create_inline_markup(('–Ω–∞–∑–∞–¥', 'back_to_bank_choose'))
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text='–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –ò–±—Ä–∞—Ç—É @ibrat21', reply_markup=markup)
    elif answer == 'tinkoff':
        markup = create_inline_markup(('–Ω–∞–∑–∞–¥', 'back_to_bank_choose'))

        bot.edit_message_text(chat_id=chat_id,
                              message_id=call.message.message_id,
                              text='*üßó–ò–Ω–∏—Ü–∏–∞–ª—ã...*\n\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã '
                                   '—Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å '
                                   '–≤–∞—à –ø–µ—Ä–µ–≤–æ–¥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω –ò."',
                              reply_markup=markup,
                              parse_mode='Markdown')
        add_data(user_id, 'chosen_method', '—Ç–∏–Ω—å–∫–æ—Ñ')
        bot.set_state(user_id, PurchaseStates.initial, chat_id)

    elif answer == 'registration':
        markup = create_inline_markup(('–Ω–∞–∑–∞–¥', 'back_to_bank_choose'))

        bot.edit_message_text(chat_id=chat_id,
                              message_id=call.message.message_id,
                              text='*üßó–ò–Ω–∏—Ü–∏–∞–ª—ã...*\n\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ '
                                   '–æ–ø–ª–∞—Ç—ã –º—ã —Å–º–æ–≥–ª–∏ '
                                   '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"',
                              parse_mode='Markdown')
        add_data(user_id, 'chosen_method', 'click')
        bot.set_state(user_id, PurchaseStates.initial, chat_id)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_bank_choose')
def back_button_while_purchase(call: CallbackQuery):
    user_id, chat_id = get_id(call=call)
    markup = create_inline_markup(('–¢–∏–Ω—å–∫–æ—Ñ—Ñ (–†–æ—Å—Å–∏—è)', 'tinkoff'), ('Click/Payme (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)', 'click'),
                                  ('–î—Ä—É–≥–æ–µ', 'other'))

    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text='–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                          reply_markup=markup)


@bot.message_handler(state=PurchaseStates.initial)
def ask_initials(message: Message):
    user_id, chat_id = get_id(message=message)
    initials = message.text.strip()
    if len(initials.split()) == 2:
        markup = create_inline_markup(('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'confirm_payment'), ('–ò–∑–º–µ–Ω–∏—Ç—å', 'back'))
        bot.send_message(user_id, text=f'–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—â–∏–µ –∏–Ω–∏—Ü–∏–∞–ª—ã: *{initials}*, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                         reply_markup=markup, parse_mode='Markdown')
        add_data(user_id, 'initials', initials)
    else:
        bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. ')


@bot.callback_query_handler(state=PurchaseStates.initial, func=lambda call: call.data in ['continue', 'back'])
def handle_initials(call: CallbackQuery):
    user_id, chat_id = get_id(call=call)
    answer = call.data
    if answer == 'continue':
        bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
        search_term = user_data[user_id]['chosen_method']
        cards_with_term = BankCards.objects.filter(bank_name__icontains=search_term)
        card_number = [card.card_number for card in cards_with_term][0]

        markup = create_inline_markup(('–û–ø–ª–∞—Ç–∏–ª(–∞)', 'paid'), ('–ù–∞–∑–∞–¥', 'back'))

        price = '5 000 RUB' if search_term == '—Ç–∏–Ω—å–∫–æ—Ñ' else '604 000 —Å—É–º'
        name = '–¢–∏–Ω—å–∫–æ—Ñ' if search_term == '—Ç–∏–Ω—å–∫–æ—Ñ' else 'Click / Payme'

        bot.send_message(user_id,
                       text=f"*üî• –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ —É–∂–µ –±–ª–∏–∑–∫–æ!*\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É {price} "
                               f"–ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:"
                               f"\n\n{card_number}\n\n{name}",
                       reply_markup=markup,
                       parse_mode='Markdown')
        bot.set_state(user_id, PurchaseStates.choose_bank, chat_id)
    else:
        bot.edit_message_text(chat_id=chat_id, text='–•–æ—Ä–æ—à–æ! –ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –µ—â–µ —Ä–∞–∑:',
                              message_id=call.message.message_id, reply_markup=None)


@bot.callback_query_handler(state=PurchaseStates.choose_bank, func=lambda call: call.data in ['paid', 'back'])
def handle_payment(call):
    user_id, chat_id = get_id(call=call)
    answer = call.data
    if answer == 'paid':
        bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
        markup = create_inline_markup(('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', 'confirm_payment'), ('–ù–∞–∑–∞–¥', 'go_back'))
        bot.send_message(chat_id=chat_id,
                         text="–ï—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é¬ª ‚úÖ",
                         reply_markup=markup)
    elif answer == 'back':
        bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
        markup = create_inline_markup(('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue'), ('–ò–∑–º–µ–Ω–∏—Ç—å', 'back'))
        initials = user_data[user_id]['initials']
        bot.send_message(user_id, text=f'–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—â–∏–µ –∏–Ω–∏—Ü–∏–∞–ª—ã: *{initials}*, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                         reply_markup=markup, parse_mode='Markdown')
        bot.set_state(user_id, PurchaseStates.initial, chat_id)


@bot.callback_query_handler(state=PurchaseStates.choose_bank,
                            func=lambda call: call.data in ['confirm_payment', 'go_back'])
def confirm_payment(call):
    user_id, chat_id = get_id(call=call)
    markup = create_inline_markup(('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', f'confsubs{user_id}'), ('–û—Ç–º–µ–Ω–∞', f'canc{user_id}'))
    bot.set_state(ADMIN_CHAT_ID, PurchaseStates.choose_bank, ADMIN_CHAT_ID)
    if call.data == 'confirm_payment':
        if call.from_user.username is not None:
            bot.send_message(ADMIN_CHAT_ID,
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {' '.join(user_data[user_id]['initials'].split()[-3:-1])} "
                             f"@{call.from_user.username} –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                             reply_markup=markup)
        else:
            bot.send_message(ADMIN_CHAT_ID,
                             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {' '.join(user_data[user_id]['initials'].split()[-3:-1])} "
                             f"username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                             reply_markup=markup)
        bot.send_message(user_id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...")
        bot.answer_callback_query(call.id)
    else:
        bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
        search_term = user_data[user_id]['chosen_method']
        cards_with_term = BankCards.objects.filter(bank_name__icontains=search_term)
        card_number = [card.card_number for card in cards_with_term][0]

        markup = create_inline_markup(('–û–ø–ª–∞—Ç–∏–ª(–∞)', 'paid'), ('–ù–∞–∑–∞–¥', 'back'))

        price = '5 000 RUB' if search_term == '—Ç–∏–Ω—å–∫–æ—Ñ' else '604 000 —Å—É–º'
        name = '–¢–∏–Ω—å–∫–æ—Ñ' if search_term == '—Ç–∏–Ω—å–∫–æ—Ñ' else 'Click / Payme'

        bot.send_photo(photo='AgACAgIAAxkBAAL6LGSZk6v6A55yfB8rGn2U_K-VyiRtAALfyzEbqbHRSCOlCtFXAAHOJgEAAwIAA3kAAy8E',
                       chat_id=user_id,
                       caption=f"*üî• –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ —É–∂–µ –±–ª–∏–∑–∫–æ!*\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É {price} "
                               f"–ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:"
                               f"\n\n{card_number}\n\n{name}",
                       reply_markup=markup,
                       parse_mode='Markdown')


@bot.callback_query_handler(state=PurchaseStates.choose_bank,
                            func=lambda call: call.data[:8] == 'confsubs' or call.data[:4] == 'canc')
def approve_payment(call):
    if call.data[:8] == 'confsubs':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton(text='–ß–∞—Ç –∫–æ—É—á–∏–Ω–≥–∞', url='https://t.me/+o5lBij2LZyMyZDMy')
        # button1 = InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å!', callback_data='fillthetest')
        markup.add(button1)
        UnpaidUser.objects.filter(user_id=int(call.data[8:])).update(has_paid=True)

        search_term = user_data[int(call.data[8:])]['chosen_method']
        BankCards.objects.filter(bank_name__icontains=search_term).update(
            number_of_activations=F('number_of_activations') + 1)
        official = 'AgACAgIAAxkBAAEBJBJk2rllWOyWYpscLJxfu7UWvw_dmwACgswxG3Rr2Er9A73F4DaK6QEAAwIAA3kAAzAE'
        bot.send_message(chat_id=int(call.data[8:]), text='*–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*‚ù§Ô∏è‚Äçüî•\n\n'
                                                                           '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ '
                                                                           '–æ–±—â–∏–π —á–∞—Ç –∫–æ—É—á–∏–Ω–≥–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É',
                       reply_markup=markup, parse_mode='Markdown')
        bot.set_state(user_id=int(call.data[8:]), state=AfterPurchaseStates.initial, chat_id=int(call.data[8:]))

    else:
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(int(call.data[4:]),
                         '–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –≤–∞–º –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É,'
                         ' –ª–∏–±–æ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã')


bot.add_custom_filter(custom_filters.StateFilter(bot))

# @bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫—É—Ä—Å')
# def subscription(message: Message):
#     user_id = message.from_user.id
#     bot.send_message(chat_id=user_id, text='–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
#     if user_id not in user_data:
#         user_data[user_id] = {'state': States.START}
#     user_id = message.chat.id
#     markup = InlineKeyboardMarkup()
#     button1 = InlineKeyboardButton(text='–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω!', callback_data='acknowledged')
#     markup.add(button1)
#     bot.send_document(chat_id=user_id,
#                       document=open('/app/fit_bot/telegram_bot/data/assets/Original ticket-542.pdf', 'rb'),
#                       caption='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç, '
#                               '\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã:', reply_markup=markup)
# @bot.callback_query_handler(func=lambda call: call.data == 'acknowledged')
