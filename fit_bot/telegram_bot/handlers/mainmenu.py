import time

from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton,\
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telebot import custom_filters

from ..loader import bot
from ..models import UnpaidUser, PaidUser
from ..states import CourseInteraction, AfterPurchaseStates
from courses.models import Mailing


@bot.message_handler(content_types=['photo'])
def return_photo_id(message: Message):
    file_id = message.photo[-1].file_id
    bot.send_message(message.from_user.id, f"Received photo with id: {file_id}")
    print(f"Received photo with id: {file_id}")
    bot.send_photo(message.chat.id, file_id)



def get_id(message=None, call=None):
    if message:
        return message.from_user.id, message.chat.id
    elif call:
        return call.from_user.id, call.message.chat.id


def create_inline_markup(*args):
    markup = InlineKeyboardMarkup()
    for b, callback_data in args:
        button = InlineKeyboardButton(text=b, callback_data=callback_data)
        markup.add(button)
    return markup


def create_keyboard_markup(*args, row=False):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    if row:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=len(args))
        buttons = [KeyboardButton(i) for i in args]
        markup.add(*buttons)
        return markup
    else:
        for i in args:
            button = KeyboardButton(i)
            markup.add(button)
        return markup


@bot.message_handler(commands=['start'])
def start_message(message: Message):
    user_id, chat_id = get_id(message=message)
    user, created = UnpaidUser.objects.get_or_create(user_id=user_id)
    if created:
        user.save()
    try:
        paid_user = PaidUser.objects.get(user=user_id)
        if paid_user:
            paid_user_main_menu(message)
        elif not paid_user and user.has_paid:
            bot.set_state(user_id, AfterPurchaseStates.initial, chat_id)
        return
    except PaidUser.DoesNotExist:
        pass

    username, full_name = message.from_user.username, message.from_user.full_name

    user = UnpaidUser(user_id=message.from_user.id, username=username, full_name=full_name)
    user.save()
    # markup = create_inline_markup(('–ü–æ–≥–Ω–∞–ª–∏!', 'Go_for_it'))
    # # markup = create_keyboard_markup('–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫—É—Ä—Å', '–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏...')
    # # test = 'BAACAgIAAxkBAAIxYGTWh_wDmD32nJlzJLLGOArhY3W6AAI8MwACs4axSvCiT5O4osErMAQ'
    # official = 'BAACAgIAAxkBAAEBICtk1ohR32s4sZirw2ksKvRvwSq6rAACPDMAArOGsUrqNisitMXu0TAE'
    # bot.send_video(user_id, video=official, reply_markup=markup)

    # daily_contents = Mailing.objects.filter(day=0)
    #
    # for content in daily_contents:
    #     if content.content_type == 'V':
    #         bot.send_video(chat_id=user.user_id, video=content.video_file_id,
    #                        caption=content.caption, reply_markup=markup)
    #     elif content.content_type == 'T':
    #         bot.send_message(chat_id=user.user_id, text=content.caption,
    #                          reply_markup=markup)
    #     elif content.content_type == 'P':
    #         bot.send_photo(chat_id=user.user_id, photo=content.photo_file_id,
    #                        caption=content.caption, reply_markup=markup)
    #     elif content.content_type == 'G':
    #         bot.send_document(chat_id=user.user_id, document=content.gif_file_id,
    #                           caption=content.caption, reply_markup=markup)
    #     time.sleep(3)

    markup = create_keyboard_markup('–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏...')

    test = 'AgACAgIAAxkBAAIxZmTWibqN_mHYK-1uJs08CdoexIw0AAI4zDEb8Jm5SqYMWroMFb56AQADAgADeQADMAQ'
    official = 'AgACAgIAAxkBAAEBJA9k2rj2-rChgpOYjuzj5M0XhhxWVwAC4coxG3dI2EqAfXmGAAHDqlABAAMCAAN5AAMwBA'
    text = '*üëã –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏–∑–∞*\n\n' \
           '–Ø ‚Äì –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ò–±—Ä–∞—Ç–∞ –∏ –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –Ω–∞ –≤—Å–µ–º ' \
           '–ø—É—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º ‚ò∫Ô∏è'

    bot.send_message(chat_id, text=text, reply_markup=markup, parse_mode='Markdown')

    # markup = create_inline_markup(('–¢–∏–Ω—å–∫–æ—Ñ—Ñ (–†–æ—Å—Å–∏—è)', 'tinkoff'), ('Click/Payme (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω)', 'click'),
    #                               ('–î—Ä—É–≥–æ–µ', 'other'))
    markup = create_inline_markup(('–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', 'registration'))

    # bot.send_message(chat_id, text='–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
    #                  reply_markup=markup)
    bot.send_message(chat_id, text='–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏...')
def info(message: Message):
    bot.send_message(chat_id=message.chat.id,
                     text='–ù–∞—à –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ - @help_fit_bot')


def just_main_menu(message: Message):
    markup = create_keyboard_markup('–ö–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')
    bot.send_message(chat_id=message.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


def paid_user_main_menu(message: Message):
    user_id, chat_id = get_id(message=message)
    markup = create_keyboard_markup('–ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π üìÜ',
                                    '–°–∫–æ–ª—å–∫–æ –µ—â–µ –º–æ–∂–Ω–æ –∫–∫–∞–ª?üëÄ', '–ö–∞—Ä—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã üó∫', '–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏...')
    bot.set_state(user_id, CourseInteraction.initial, chat_id)
    bot.send_message(user_id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)



bot.add_custom_filter(custom_filters.StateFilter(bot))

